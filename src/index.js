import fs from 'fs';
import path from 'path';
import buildProject from './builder';

const suffixRegex = (suffix) => new RegExp(`${suffix.replace('.', '\\.')}$`);

export default function melangePlugin(options = {}) {
    let isDev;
    let root;
    let buildProcess;

    const srcDir = options.src ?? 'src'
    const target = options.target ?? 'output';
    const buildDir = options.buildDir ?? `_build/default/${srcDir}/${target}`;
    const lockFile = options.lockFile ?? path.resolve(`_build/.lock`)

    return {
        name: 'vite-plugin-melange',
        enforce: 'pre',
        async configResolved(config) {
            root = config.root;
            isDev = config.mode === 'development';

            const launchingDevServer =
                config.command === 'serve' && !config.inlineConfig.hasOwnProperty('preview');

            const buildingProduction = config.command === 'build';

            const shouldRebuild = launchingDevServer || buildingProduction;

            options.lockFile = lockFile
            const isLocked = fs.existsSync(options.lockFile);

            options.watch =
                !isLocked && (config.command === 'serve' || Boolean(config.build.watch));

            if (shouldRebuild) {
                buildProcess = await buildProject(options);
            }
        },
        config: (config) => ({
            build: {
                watch: config.build?.watch ? { exclude: ['**/*.re'] } : null,
            },
            server: {
                watch: {
                    ignored: ['**/*.re'],
                },
            },
        }),

        // Map the imports to the ES6 imports generated by Melange.
        // Lets other plugins and vite-internals discover modules inside build folder
        async resolveId(source, importer, options) {
            if (options.isEntry || !importer) return null;
            if (path.isAbsolute(source)) return null

            if (source.endsWith('.re')) {
                const output = buildDir;
                const relativePath = path.relative(root, source);
                const filePath = path.resolve(output, relativePath).replace(suffixRegex('re'), 'js');
                return filePath
            }

            const dirname = path.dirname(importer);

            try {
                // Check if file is bundled under the target's node_modules
                const dir = require.resolve(source, { paths: [dirname] });
                if (dir.includes(buildDir)) {
                    return dir;
                }
                
                return null;
            } catch (ignored) {}

        },

        async closeBundle() {
            buildProcess.stopWatcher();
        },
    };
}
